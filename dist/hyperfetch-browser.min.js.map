{"version":3,"file":"hyperfetch-browser.min.js","mappings":"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","sources":["webpack://hypf/webpack/universalModuleDefinition","webpack://hypf/webpack/bootstrap","webpack://hypf/webpack/runtime/define property getters","webpack://hypf/webpack/runtime/hasOwnProperty shorthand","webpack://hypf/webpack/runtime/make namespace object","webpack://hypf/./src/Hyperfetch.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"hypf\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"hypf\"] = factory();\n\telse\n\t\troot[\"hypf\"] = factory();\n})(self, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import type {\r\n  HttpRequestFunctions,\r\n  RequestFunction,\r\n  RequestOptions,\r\n  HttpMethodFunction,\r\n} from \"types/request.js\";\r\nimport type { Hooks } from \"types/hooks.js\";\r\n\r\n// Default maximum recommended timeout in milliseconds (adjust as needed)\r\nconst DEFAULT_MAX_TIMEOUT = 2147483647;\r\nconst DEFAULT_BACKOFF_FACTOR = 0.3;\r\nconst DEFAULT_JITTER_FACTOR = 1;\r\n\r\nfunction appendParams(\r\n  url: string,\r\n  params?: Record<string, string | number>\r\n): string {\r\n  if (!params) return url;\r\n\r\n  const urlWithParams = new URL(url);\r\n  Object.entries(params).forEach(([key, value]) =>\r\n    urlWithParams.searchParams.append(key, String(value))\r\n  );\r\n\r\n  return urlWithParams.toString();\r\n}\r\n\r\nfunction createRequest(\r\n  baseUrl?: string,\r\n  hooks?: Hooks,\r\n  DEBUG = false\r\n): HttpRequestFunctions {\r\n  // Check if fetch is available (browser environment)\r\n  if (typeof fetch === \"undefined\") {\r\n    throw new Error(\r\n      \"This library is intended for use in the browser environment only.\"\r\n    );\r\n  }\r\n\r\n  const defaultBackoff = (retryCount: number, factor: number) =>\r\n    Math.pow(2, retryCount) * 1000 * factor; // Exponential backoff, starting from 1 second\r\n  const defaultJitter = (factor: number) => Math.random() * 1000 * factor; // Randomized delay up to 1 second\r\n\r\n  // Expose the AbortController instance\r\n  const abortController = new AbortController();\r\n\r\n  const request: RequestFunction = async (\r\n    url = \"\",\r\n    options = {},\r\n    data\r\n  ): Promise<[Error | null, null]> => {\r\n    try {\r\n      // Execute pre-request hook\r\n      if (hooks?.preRequest) {\r\n        hooks.preRequest(url, options);\r\n      }\r\n\r\n      const fullUrl = `${baseUrl}${url}`;\r\n      const {\r\n        method = \"GET\",\r\n        retries = 0,\r\n        backoff = defaultBackoff,\r\n        jitter = false,\r\n        jitterFactor = DEFAULT_JITTER_FACTOR,\r\n        backoffFactor = DEFAULT_BACKOFF_FACTOR,\r\n        timeout = DEFAULT_MAX_TIMEOUT,\r\n        retryOnTimeout = false,\r\n        params,\r\n        headers = {},\r\n        signal,\r\n        ...otherOptions\r\n      } = options;\r\n\r\n      const reqHeaders = new Headers(options.headers);\r\n\r\n      // Set default Content-Type to application/json if not provided\r\n      if (!reqHeaders.get(\"Content-Type\") && data && typeof data === \"object\") {\r\n        reqHeaders.set(\"Content-Type\", \"application/json\");\r\n      }\r\n\r\n      // Automatically detect and add Content-Length based on payload length\r\n      const textEncoder = new TextEncoder();\r\n      if (!reqHeaders.get(\"Content-Length\") && data) {\r\n        if (typeof data === \"string\") {\r\n          reqHeaders.set(\r\n            \"Content-Length\",\r\n            String(textEncoder.encode(data).length)\r\n          );\r\n        } else if (\r\n          reqHeaders.get(\"Content-Length\")?.includes(\"application/json\")\r\n        ) {\r\n          reqHeaders.set(\r\n            \"Content-Length\",\r\n            String(textEncoder.encode(JSON.stringify(data)).length)\r\n          );\r\n        }\r\n      }\r\n\r\n      // Use the external AbortController instance\r\n      const controller = signal ? signal : abortController.signal;\r\n\r\n      // Execute pre-timeout hook\r\n      if (hooks?.preTimeout) {\r\n        hooks.preTimeout(url, options);\r\n      }\r\n\r\n      const timeoutId = timeout\r\n        ? setTimeout(() => {\r\n            abortController.abort();\r\n\r\n            // Execute post-timeout hook\r\n            if (hooks?.postTimeout) {\r\n              hooks.postTimeout(url, options);\r\n            }\r\n          }, timeout)\r\n        : undefined;\r\n\r\n      // Append params to the URL\r\n      const urlWithParams = params ? appendParams(fullUrl, params) : fullUrl;\r\n\r\n      const responsePromise = fetch(urlWithParams, {\r\n        method,\r\n        signal: controller,\r\n        headers,\r\n        ...otherOptions,\r\n        body: data ? JSON.stringify(data) : undefined,\r\n      });\r\n\r\n      clearTimeout(timeoutId);\r\n\r\n      const response = await responsePromise;\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`Network response was not ok: ${response.status}`);\r\n      }\r\n\r\n      const contentType = response.headers.get(\"content-type\");\r\n      const responseData =\r\n        contentType && contentType.includes(\"application/json\")\r\n          ? await response.json()\r\n          : await response.text();\r\n\r\n      // Execute post-request hook\r\n      if (hooks?.postRequest) {\r\n        hooks.postRequest(url, options, data, [null, responseData]);\r\n      }\r\n\r\n      return [null, responseData];\r\n    } catch (error) {\r\n      // Execute post-request hook for errors\r\n      if (hooks?.postRequest) {\r\n        if (error instanceof Error) {\r\n          hooks.postRequest(url, options, data, [error, null]);\r\n        }\r\n      }\r\n\r\n      if (error instanceof Error) {\r\n        if (error.name === \"AbortError\") {\r\n          console.error(\"Request aborted:\", error);\r\n        } else if (\r\n          options.retryOnTimeout &&\r\n          error.name === \"TimeoutError\" &&\r\n          options.retries &&\r\n          options.retries > 0\r\n        ) {\r\n          const delay =\r\n            options.jitter && options.jitterFactor\r\n              ? defaultJitter(options.jitterFactor)\r\n              : defaultBackoff(\r\n                  options.retries,\r\n                  options.backoffFactor\r\n                    ? options.backoffFactor\r\n                    : DEFAULT_BACKOFF_FACTOR\r\n                );\r\n          if (DEBUG) {\r\n            console.warn(\r\n              `Request timed out. Retrying in ${delay}ms... (Remaining retries: ${options.retries})`\r\n            );\r\n          }\r\n          // Execute pre-retry hook\r\n          if (hooks?.preRetry) {\r\n            hooks.preRetry(url, options, options.retries, options.retries);\r\n          }\r\n          await new Promise((resolve) => setTimeout(resolve, delay));\r\n          const [retryErr, retryData] = await request(\r\n            url,\r\n            { ...options, retries: options.retries - 1 },\r\n            data\r\n          );\r\n          // Execute post-retry hook\r\n          if (hooks?.postRetry) {\r\n            hooks.postRetry(\r\n              url,\r\n              options,\r\n              data,\r\n              [retryErr, retryData],\r\n              options.retries,\r\n              options.retries - 1\r\n            );\r\n          }\r\n          return [retryErr, retryData];\r\n        } else if (options.retries && options.retries > 0) {\r\n          const delay =\r\n            options.jitter && options.jitterFactor\r\n              ? defaultJitter(options.jitterFactor)\r\n              : defaultBackoff(\r\n                  options.retries,\r\n                  options.backoffFactor\r\n                    ? options.backoffFactor\r\n                    : DEFAULT_BACKOFF_FACTOR\r\n                );\r\n          if (DEBUG) {\r\n            console.warn(\r\n              `Request failed. Retrying in ${delay}ms... (Remaining retries: ${options.retries})`\r\n            );\r\n          }\r\n          // Execute pre-retry hook\r\n          if (hooks?.preRetry) {\r\n            hooks.preRetry(url, options, options.retries, options.retries);\r\n          }\r\n          await new Promise((resolve) => setTimeout(resolve, delay));\r\n          const [retryErr, retryData] = await request(\r\n            url,\r\n            { ...options, retries: options.retries - 1 },\r\n            data\r\n          );\r\n          // Execute post-retry hook\r\n          if (hooks?.postRetry) {\r\n            hooks.postRetry(\r\n              url,\r\n              options,\r\n              data,\r\n              [retryErr, retryData],\r\n              options.retries,\r\n              options.retries - 1\r\n            );\r\n          }\r\n          return [retryErr, retryData];\r\n        }\r\n      }\r\n\r\n      if (error instanceof Error) {\r\n        return [error, null];\r\n      }\r\n\r\n      return [null, null];\r\n    }\r\n  };\r\n\r\n  const httpMethodFunction: HttpMethodFunction =\r\n    (url: string, options: RequestOptions = {}) =>\r\n    (method = \"GET\", additionalOptions = {}, data) => {\r\n      return request(url, { method, ...options, ...additionalOptions }, data);\r\n    };\r\n\r\n  // Expose the AbortController instance through the library interface\r\n  const getAbortController = () => abortController;\r\n\r\n  return {\r\n    get: (url, options, data) =>\r\n      httpMethodFunction(url, options)(\"GET\", options, data),\r\n    post: (url, options, data) =>\r\n      httpMethodFunction(url, options)(\"POST\", options, data),\r\n    put: (url, options, data) =>\r\n      httpMethodFunction(url, options)(\"PUT\", options, data),\r\n    delete: (url, options, data) =>\r\n      httpMethodFunction(url, options)(\"DELETE\", options, data),\r\n    patch: (url, options, data) =>\r\n      httpMethodFunction(url, options)(\"PATCH\", options, data),\r\n    options: (url, options, data) =>\r\n      httpMethodFunction(url, options)(\"OPTIONS\", options, data),\r\n    getAbortController,\r\n  };\r\n}\r\n\r\nexport default { createRequest };\r\n"],"names":["root","factory","exports","module","define","amd","self","__webpack_require__","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","DEFAULT_MAX_TIMEOUT","DEFAULT_BACKOFF_FACTOR","DEFAULT_JITTER_FACTOR","createRequest","baseUrl","hooks","DEBUG","fetch","Error","defaultBackoff","retryCount","factor","Math","pow","defaultJitter","random","abortController","AbortController","request","url","options","data","preRequest","fullUrl","method","retries","backoff","jitter","jitterFactor","backoffFactor","timeout","retryOnTimeout","params","headers","signal","otherOptions","reqHeaders","Headers","set","textEncoder","TextEncoder","String","encode","length","includes","JSON","stringify","controller","preTimeout","timeoutId","setTimeout","abort","postTimeout","undefined","urlWithParams","URL","entries","forEach","searchParams","append","toString","appendParams","responsePromise","body","clearTimeout","response","ok","status","contentType","responseData","json","text","postRequest","error","name","console","delay","warn","preRetry","Promise","resolve","retryErr","retryData","postRetry","httpMethodFunction","additionalOptions","post","put","delete","patch","getAbortController"],"sourceRoot":""}